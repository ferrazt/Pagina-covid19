"use strict";import Geometry from"./Geometry.js";var getAngleBetweenPoints=Geometry.getAngleBetweenPoints,getCenterOfPoints=Geometry.getCenterOfPoints,getDistanceBetweenPoints=Geometry.getDistanceBetweenPoints;function round(e,t){t=Math.pow(10,t);return Math.round(e*t)/t}function getAreaOfCircle(e){if(e<=0)throw new Error("radius of circle must be a positive number.");return Math.PI*e*e}function getCircularSegmentArea(e,t){return e*e*Math.acos(1-t/e)-(e-t)*Math.sqrt(t*(2*e-t))}function getOverlapBetweenCircles(e,t,n){var r,i=0;return i=n<e+t?round(i=n<=Math.abs(t-e)?getAreaOfCircle(e<t?e:t):(n=n-(r=(e*e-t*t+n*n)/(2*n)),getCircularSegmentArea(e,e-r)+getCircularSegmentArea(t,t-n)),14):i}function getCircleCircleIntersection(e,t){var n,r,i,s,c=getDistanceBetweenPoints(e,t),o=e.r,l=t.r,u=[];return c<o+l&&c>Math.abs(o-l)&&(n=((i=o*o)-l*l+c*c)/(2*c),r=Math.sqrt(i-n*n),s=e.x,o=t.x,e=(l=e.y)+n*((i=t.y)-l)/c,t=r/c*-(o-s),u=[{x:round((s=s+n*(o-s)/c)+(l=r/c*-(i-l)),14),y:round(e-t,14)},{x:round(s-l,14),y:round(e+t,14)}]),u}function getCirclesIntersectionPoints(e){return e.reduce(function(e,i,s,t){t=t.slice(s+1).reduce(function(e,t,n){var r=[s,n+s+1];return e.concat(getCircleCircleIntersection(i,t).map(function(e){return e.indexes=r,e}))},[]);return e.concat(t)},[])}function isCircle1CompletelyOverlappingCircle2(e,t){return getDistanceBetweenPoints(e,t)+t.r<e.r+1e-10}function isPointInsideCircle(e,t){return getDistanceBetweenPoints(e,t)<=t.r+1e-10}function isPointInsideAllCircles(t,e){return!e.some(function(e){return!isPointInsideCircle(t,e)})}function isPointOutsideAllCircles(t,e){return!e.some(function(e){return isPointInsideCircle(t,e)})}function getCirclesIntersectionPolygon(t){return getCirclesIntersectionPoints(t).filter(function(e){return isPointInsideAllCircles(e,t)})}function getAreaOfIntersectionBetweenCircles(o){var e,t,n,r=getCirclesIntersectionPolygon(o);return 1<r.length&&(t=getCenterOfPoints(r),n=(r=r.map(function(e){return e.angle=getAngleBetweenPoints(t,e),e}).sort(function(e,t){return t.angle-e.angle}))[r.length-1],0===(r=r.reduce(function(e,i){var t,s=e.startPoint,c=getCenterOfPoints([s,i]),n=i.indexes.filter(function(e){return-1<s.indexes.indexOf(e)}).reduce(function(e,t){var n=o[t],r=getAngleBetweenPoints(n,i),t=getAngleBetweenPoints(n,s),r=t-(t-r+(t<r?2*Math.PI:0))/2,r=getDistanceBetweenPoints(c,{x:n.x+n.r*Math.sin(r),y:n.y+n.r*Math.cos(r)}),n=n.r;return 2*n<r&&(r=2*n),e=!e||e.width>r?{r:n,largeArc:n<r?1:0,width:r,x:i.x,y:i.y}:e},null);return n&&(t=n.r,e.arcs.push(["A",t,t,0,n.largeArc,1,n.x,n.y]),e.startPoint=i),e},{startPoint:n,arcs:[]}).arcs).length||1===r.length||(r.unshift(["M",n.x,n.y]),e={center:t,d:r})),e}var geometryCircles={getAreaOfCircle:getAreaOfCircle,getAreaOfIntersectionBetweenCircles:getAreaOfIntersectionBetweenCircles,getCircleCircleIntersection:getCircleCircleIntersection,getCirclesIntersectionPoints:getCirclesIntersectionPoints,getCirclesIntersectionPolygon:getCirclesIntersectionPolygon,getCircularSegmentArea:getCircularSegmentArea,getOverlapBetweenCircles:getOverlapBetweenCircles,isCircle1CompletelyOverlappingCircle2:isCircle1CompletelyOverlappingCircle2,isPointInsideCircle:isPointInsideCircle,isPointInsideAllCircles:isPointInsideAllCircles,isPointOutsideAllCircles:isPointOutsideAllCircles,round:round};export default geometryCircles;