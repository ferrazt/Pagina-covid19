"use strict";var __extends=this&&this.__extends||function(){var n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])})(t,e)};return function(t,e){function o(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}}();import Annotation from"../Annotations.js";import MockPoint from"../MockPoint.js";import Tunnel from"./Tunnel.js";import U from"../../../Core/Utilities.js";import palette from"../../../Core/Color/Palette.js";var merge=U.merge,createPathDGenerator=function(n,r){return function(){var t=this.annotation;if(!t.startRetracements||!t.endRetracements)return[];var e=this.anchor(t.startRetracements[n]).absolutePosition,o=this.anchor(t.endRetracements[n]).absolutePosition,e=[["M",Math.round(e.x),Math.round(e.y)],["L",Math.round(o.x),Math.round(o.y)]];return r&&(o=this.anchor(t.endRetracements[n-1]).absolutePosition,t=this.anchor(t.startRetracements[n-1]).absolutePosition,e.push(["L",Math.round(o.x),Math.round(o.y)],["L",Math.round(t.x),Math.round(t.y)])),e}},Fibonacci=function(o){function t(t,e){return o.call(this,t,e)||this}return __extends(t,o),t.prototype.linkPoints=function(){o.prototype.linkPoints.call(this),this.linkRetracementsPoints()},t.prototype.linkRetracementsPoints=function(){var n=this.points,r=n[0].y-n[3].y,i=n[1].y-n[2].y,s=n[0].x,a=n[1].x;t.levels.forEach(function(t,e){var o=n[0].y-r*t,t=n[1].y-i*t;this.startRetracements=this.startRetracements||[],this.endRetracements=this.endRetracements||[],this.linkRetracementPoint(e,s,o,this.startRetracements),this.linkRetracementPoint(e,a,t,this.endRetracements)},this)},t.prototype.linkRetracementPoint=function(t,e,o,n){var r=n[t],i=this.options.typeOptions;r?(r.options.x=e,r.options.y=o,r.refresh()):n[t]=new MockPoint(this.chart,this,{x:e,y:o,xAxis:i.xAxis,yAxis:i.yAxis})},t.prototype.addShapes=function(){t.levels.forEach(function(t,e){var o=this.options.typeOptions,n=o.backgroundColors,r=o.lineColor,o=o.lineColors;this.initShape({type:"path",d:createPathDGenerator(e),stroke:o[e]||r},!1),0<e&&this.initShape({type:"path",fill:n[e-1],strokeWidth:0,d:createPathDGenerator(e,!0)})},this)},t.prototype.addLabels=function(){t.levels.forEach(function(t,e){var o=this.options.typeOptions,t=this.initLabel(merge(o.labels[e],{point:function(t){return MockPoint.pointToOptions(t.annotation.startRetracements[e])},text:t.toString()}));o.labels[e]=t.options},this)},t.levels=[0,.236,.382,.5,.618,.786,1],t}(Tunnel);Fibonacci.prototype.defaultOptions=merge(Tunnel.prototype.defaultOptions,{typeOptions:{height:2,backgroundColors:["rgba(130, 170, 255, 0.4)","rgba(139, 191, 216, 0.4)","rgba(150, 216, 192, 0.4)","rgba(156, 229, 161, 0.4)","rgba(162, 241, 130, 0.4)","rgba(169, 255, 101, 0.4)"],lineColor:palette.neutralColor40,lineColors:[],labels:[]},labelOptions:{allowOverlap:!0,align:"right",backgroundColor:"none",borderWidth:0,crop:!1,overflow:"none",shape:"rect",style:{color:"grey"},verticalAlign:"middle",y:0}});export default Annotation.types.fibonacci=Fibonacci;