"use strict";var __extends=this&&this.__extends||function(){var i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)};return function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}}();import A from"../../Core/Animation/AnimationUtilities.js";var animObject=A.animObject;import Color from"../../Core/Color/Color.js";var color=Color.parse;import GeometryMixin from"../../Mixins/Geometry.js";var getCenterOfPoints=GeometryMixin.getCenterOfPoints,getDistanceBetweenPoints=GeometryMixin.getDistanceBetweenPoints;import GeometryCirclesModule from"../../Mixins/GeometryCircles.js";var getAreaOfCircle=GeometryCirclesModule.getAreaOfCircle,getAreaOfIntersectionBetweenCircles=GeometryCirclesModule.getAreaOfIntersectionBetweenCircles,getCircleCircleIntersection=GeometryCirclesModule.getCircleCircleIntersection,getCirclesIntersectionPolygon=GeometryCirclesModule.getCirclesIntersectionPolygon,getOverlapBetweenCirclesByDistance=GeometryCirclesModule.getOverlapBetweenCircles,isCircle1CompletelyOverlappingCircle2=GeometryCirclesModule.isCircle1CompletelyOverlappingCircle2,isPointInsideAllCircles=GeometryCirclesModule.isPointInsideAllCircles,isPointInsideCircle=GeometryCirclesModule.isPointInsideCircle,isPointOutsideAllCircles=GeometryCirclesModule.isPointOutsideAllCircles;import NelderMeadMixin from"../../Mixins/NelderMead.js";var nelderMead=NelderMeadMixin.nelderMead;import palette from"../../Core/Color/Palette.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";var ScatterSeries=SeriesRegistry.seriesTypes.scatter;import VennPoint from"./VennPoint.js";import VennUtils from"./VennUtils.js";import U from"../../Core/Utilities.js";var addEvent=U.addEvent,extend=U.extend,isArray=U.isArray,isNumber=U.isNumber,isObject=U.isObject,isString=U.isString,merge=U.merge,VennSeries=function(t){function u(){var e=null!==t&&t.apply(this,arguments)||this;return e.data=void 0,e.mapOfIdToRelation=void 0,e.options=void 0,e.points=void 0,e}return __extends(u,t),u.getLabelPosition=function(i,n){var e=i.reduce(function(e,t){var r=t.r/2;return[{x:t.x,y:t.y},{x:t.x+r,y:t.y},{x:t.x-r,y:t.y},{x:t.x,y:t.y+r},{x:t.x,y:t.y-r}].reduce(function(e,t){var r=VennUtils.getMarginFromCircles(t,i,n);return e.margin<r&&(e.point=t,e.margin=r),e},e)},{point:void 0,margin:-Number.MAX_VALUE}).point,t=nelderMead(function(e){return-VennUtils.getMarginFromCircles({x:e[0],y:e[1]},i,n)},[e.x,e.y]),e={x:t[0],y:t[1]};return e=!isPointInsideAllCircles(e,i)||!isPointOutsideAllCircles(e,n)?1<i.length?getCenterOfPoints(getCirclesIntersectionPolygon(i)):{x:i[0].x,y:i[0].y}:e},u.getLabelValues=function(e,t){var r=e.sets,i=t.reduce(function(e,t){return e[-1<r.indexOf(t.sets[0])?"internal":"external"].push(t.circle),e},{internal:[],external:[]});i.external=i.external.filter(function(t){return i.internal.some(function(e){return!isCircle1CompletelyOverlappingCircle2(t,e)})});t=u.getLabelPosition(i.internal,i.external);return{position:t,width:VennUtils.getLabelWidth(t,i.internal,i.external)}},u.layout=function(e){var i,n,o={},s={};return 0<e.length&&(i=VennUtils.layoutGreedyVenn(e),n=e.filter(VennUtils.isSet),e.forEach(function(e){var t=e.sets,r=t.join(),t=VennUtils.isSet(e)?i[r]:getAreaOfIntersectionBetweenCircles(t.map(function(e){return i[e]}));t&&(o[r]=t,s[r]=u.getLabelValues(e,n))})),{mapOfIdToShape:o,mapOfIdToLabelValues:s}},u.getScale=function(e,t,r){var i=r.bottom-r.top,n=r.right-r.left,o=(r.right+r.left)/2,r=(r.top+r.bottom)/2,i=Math.min(0<n?1/n*e:1,0<i?1/i*t:1);return{scale:i,centerX:e/2-o*i,centerY:t/2-r*i}},u.updateFieldBoundaries=function(e,t){var r=t.x-t.r,i=t.x+t.r,n=t.y+t.r,t=t.y-t.r;return(!isNumber(e.left)||e.left>r)&&(e.left=r),(!isNumber(e.right)||e.right<i)&&(e.right=i),(!isNumber(e.top)||e.top>t)&&(e.top=t),(!isNumber(e.bottom)||e.bottom<n)&&(e.bottom=n),e},u.prototype.animate=function(e){var n;e||(n=animObject(this.options.animation),this.points.forEach(function(e){var t,r,i=e.shapeArgs;e.graphic&&i&&(t={},r={},i.d?t.opacity=.001:(t.r=0,r.r=i.r),e.graphic.attr(t).animate(r,n),i.d&&setTimeout(function(){e&&e.graphic&&e.graphic.animate({opacity:1})},n.duration))},this))},u.prototype.drawPoints=function(){var i=this,n=i.chart,o=i.group,e=i.points||[],s=n.renderer;e.forEach(function(e){var t={zIndex:isArray(e.sets)?e.sets.length:0},r=e.shapeArgs;n.styledMode||extend(t,i.pointAttribs(e,e.state)),e.draw({isNew:!e.graphic,animatableAttribs:r,attribs:t,group:o,renderer:s,shapeType:r&&r.d?"path":"circle"})})},u.prototype.init=function(){ScatterSeries.prototype.init.apply(this,arguments),delete this.opacity},u.prototype.pointAttribs=function(e,t){var r=this.options||{},i=e&&e.options||{},t=t&&r.states[t]||{},t=merge(r,{color:e&&e.color},i,t);return{fill:color(t.color).brighten(t.brightness).get(),opacity:t.opacity,stroke:t.borderColor,"stroke-width":t.borderWidth,dashstyle:t.borderDashStyle}},u.prototype.translate=function(){var e=this.chart;this.processedXData=this.xData,this.generatePoints();var t=VennUtils.processVennData(this.options.data),t=u.layout(t),a=t.mapOfIdToShape,l=t.mapOfIdToLabelValues,t=Object.keys(a).filter(function(e){e=a[e];return e&&isNumber(e.r)}).reduce(function(e,t){return u.updateFieldBoundaries(e,a[t])},{top:0,bottom:0,left:0,right:0}),t=u.getScale(e.plotWidth,e.plotHeight,t),c=t.scale,p=t.centerX,d=t.centerY;this.points.forEach(function(e){var t,r=isArray(e.sets)?e.sets:[],i=r.join(),n=a[i],o=l[i]||{},s=o.width,i=o.position,o=e.options&&e.options.dataLabels;n&&(n.r?t={x:p+n.x*c,y:d+n.y*c,r:n.r*c}:n.d&&((n=n.d).forEach(function(e){"M"===e[0]?(e[1]=p+e[1]*c,e[2]=d+e[2]*c):"A"===e[0]&&(e[1]=e[1]*c,e[2]=e[2]*c,e[6]=p+e[6]*c,e[7]=d+e[7]*c)}),t={d:n}),i?(i.x=p+i.x*c,i.y=d+i.y*c):i={},isNumber(s)&&(s=Math.round(s*c))),e.shapeArgs=t,i&&t&&(e.plotX=i.x,e.plotY=i.y),s&&t&&(e.dlOptions=merge(!0,{style:{width:s}},isObject(o,!0)?o:void 0)),e.name=e.options.name||r.join("âˆ©")})},u.defaultOptions=merge(ScatterSeries.defaultOptions,{borderColor:palette.neutralColor20,borderDashStyle:"solid",borderWidth:1,brighten:0,clip:!1,colorByPoint:!0,dataLabels:{enabled:!0,verticalAlign:"middle",formatter:function(){return this.point.name}},inactiveOtherPoints:!0,marker:!1,opacity:.75,showInLegend:!1,states:{hover:{opacity:1,borderColor:palette.neutralColor80},select:{color:palette.neutralColor20,borderColor:palette.neutralColor100,animation:!1},inactive:{opacity:.075}},tooltip:{pointFormat:"{point.name}: {point.value}"}}),u}(ScatterSeries);extend(VennSeries.prototype,{axisTypes:[],directTouch:!0,isCartesian:!1,pointArrayMap:["value"],pointClass:VennPoint,utils:VennUtils}),SeriesRegistry.registerSeriesType("venn",VennSeries);export default VennSeries;addEvent(VennSeries,"afterSetOptions",function(e){var t=e.options.states;this.is("venn")&&Object.keys(t).forEach(function(e){t[e].halo=!1})});