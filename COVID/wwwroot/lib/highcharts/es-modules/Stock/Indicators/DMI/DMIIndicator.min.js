"use strict";var __extends=this&&this.__extends||function(){var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)};return function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}}();import MultipleLinesMixin from"../../../Mixins/MultipleLines.js";import palette from"../../../Core/Color/Palette.js";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";var SMAIndicator=SeriesRegistry.seriesTypes.sma;import U from"../../../Core/Utilities.js";var correctFloat=U.correctFloat,extend=U.extend,isArray=U.isArray,merge=U.merge,DMIIndicator=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return __extends(e,t),e.prototype.calculateDM=function(t,e,i){var r=t[e][1],o=t[e][2],a=t[e-1][1],e=t[e-1][2],o=e-o<r-a?i?Math.max(r-a,0):0:i?0:Math.max(e-o,0);return correctFloat(o)},e.prototype.calculateDI=function(t,e){return t/e*100},e.prototype.calculateDX=function(t,e){return correctFloat(Math.abs(t-e)/Math.abs(t+e)*100)},e.prototype.smoothValues=function(t,e,i){return correctFloat(t-t/i+e)},e.prototype.getTR=function(t,e){return correctFloat(Math.max(t[1]-t[2],e?Math.abs(t[1]-e[3]):0,e?Math.abs(t[2]-e[3]):0))},e.prototype.getValues=function(t,e){var i=e.period,r=t.xData,o=t.yData,a=o?o.length:0,s=[],n=[],l=[];if(!(r.length<=i)&&isArray(o[0])&&4===o[0].length){for(var p=0,u=0,c=0,h=1;h<a;h++){var y,D,m,d=void 0,M=void 0,I=void 0,f=void 0,x=void 0,g=void 0;h<=i?(p+=d=this.calculateDM(o,h,!0),u+=M=this.calculateDM(o,h),c+=I=this.getTR(o[h],o[h-1]),h===i&&(f=this.calculateDI(p,c),x=this.calculateDI(u,c),g=this.calculateDX(p,u),s.push([r[h],g,f,x]),n.push(r[h]),l.push([g,f,x]))):(d=this.calculateDM(o,h,!0),M=this.calculateDM(o,h),I=this.getTR(o[h],o[h-1]),y=this.smoothValues(p,d,i),D=this.smoothValues(u,M,i),m=this.smoothValues(c,I,i),u=D,f=this.calculateDI(p=y,c=m),x=this.calculateDI(u,c),g=this.calculateDX(p,u),s.push([r[h],g,f,x]),n.push(r[h]),l.push([g,f,x]))}return{values:s,xData:n,yData:l}}},e.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0},marker:{enabled:!1},tooltip:{pointFormat:'<span style="color: {point.color}">‚óè</span><b> {series.name}</b><br/><span style="color: {point.color}">DX</span>: {point.y}<br/><span style="color: {point.series.options.plusDILine.styles.lineColor}">+DI</span>: {point.plusDI}<br/><span style="color: {point.series.options.minusDILine.styles.lineColor}">-DI</span>: {point.minusDI}<br/>'},plusDILine:{styles:{lineWidth:1,lineColor:palette.positiveColor}},minusDILine:{styles:{lineWidth:1,lineColor:palette.negativeColor}},dataGrouping:{approximation:"averages"}}),e}(SMAIndicator);extend(DMIIndicator.prototype,{nameBase:"DMI",pointArrayMap:["y","plusDI","minusDI"],parallelArrays:["x","y","plusDI","minusDI"],pointValKey:"y",linesApiNames:["plusDILine","minusDILine"],drawGraph:MultipleLinesMixin.drawGraph,getTranslatedLinesNames:MultipleLinesMixin.getTranslatedLinesNames,translate:MultipleLinesMixin.translate,toYData:MultipleLinesMixin.toYData}),SeriesRegistry.registerSeriesType("dmi",DMIIndicator);export default DMIIndicator;